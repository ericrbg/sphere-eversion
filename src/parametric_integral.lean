import measure_theory.interval_integral
import analysis.calculus.mean_value
import analysis.normed_space.finite_dimension

noncomputable theory

open topological_space measure_theory filter first_countable_topology metric
open_locale topological_space filter nnreal big_operators

@[simp]
lemma real.nnabs_of_nonneg {x : ‚Ñù} (h : 0 ‚â§ x) : real.nnabs x = nnreal.of_real x :=
by { ext, simp [nnreal.coe_of_real x h, abs_of_nonneg h] }

lemma nnreal.coe_of_real_le (x : ‚Ñù) : (nnreal.of_real x : ‚Ñù) ‚â§ abs x :=
begin
  by_cases h : 0 ‚â§ x,
  { simp [h, nnreal.coe_of_real x h, le_abs_self] },
  { simp [nnreal.of_real, h, le_abs_self, abs_nonneg] }
end

section loc_integrable

variables {Œ± : Type*} [measurable_space Œ±] [topological_space Œ±]

variables {E : Type*} [normed_group E] -- [second_countable_topology E] [normed_space ‚Ñù E]
  [measurable_space E] --[borel_space E]

/-- A function is locally integrable if it is integrable on each compact set. -/
def loc_integrable (f : Œ± ‚Üí E) (Œº : measure Œ± . volume_tac) := ‚àÄ K, is_compact K ‚Üí integrable_on f K Œº

end loc_integrable

section interval_integrable
open set

variables {Œ± : Type*} [linear_order Œ±] {P : Œ± ‚Üí Prop} {a b : Œ±}

/-- The open-closed interval with unordered bounds. -/
def interval_oc : Œ± ‚Üí Œ± ‚Üí set Œ± := Œª a b, Ioc (min a b) (max a b)

lemma interval_oc_of_le (h : a ‚â§ b) : interval_oc a b = Ioc a b :=
by simp [interval_oc, h]

lemma interval_oc_of_lt (h : b < a) : interval_oc a b = Ioc b a :=
by simp [interval_oc, le_of_lt h]

lemma forall_interval_oc_iff :
  (‚àÄ x ‚àà interval_oc a b, P x) ‚Üî (‚àÄ x ‚àà Ioc a b, P x) ‚àß (‚àÄ x ‚àà Ioc b a, P x) :=
by { dsimp [interval_oc], cases le_total a b with hab hab ; simp [hab] }

variables {E : Type*} [measurable_space Œ±] {Œº : measure Œ±} [normed_group E]

lemma ae_interval_oc_iff :
  (‚àÄ·µê x ‚àÇŒº, x ‚àà interval_oc a b ‚Üí P x) ‚Üî (‚àÄ·µê x ‚àÇŒº, x ‚àà Ioc a b ‚Üí P x) ‚àß (‚àÄ·µê x ‚àÇŒº, x ‚àà Ioc b a ‚Üí P x) :=
by { dsimp [interval_oc], cases le_total a b with hab hab ; simp [hab] }

lemma ae_measurable_interval_oc_iff {Œº : measure Œ±} {Œ≤ : Type*} [measurable_space Œ≤] {f : Œ± ‚Üí Œ≤} :
  (ae_measurable f $ Œº.restrict $ interval_oc a b) ‚Üî
  (ae_measurable f $ Œº.restrict $ Ioc a b) ‚àß (ae_measurable f $ Œº.restrict $ Ioc b a) :=
by { dsimp [interval_oc], cases le_total a b with hab hab ; simp [hab] }


variables  [topological_space Œ±] [opens_measurable_space Œ±] [order_closed_topology Œ±]

lemma ae_interval_oc_iff' : (‚àÄ·µê x ‚àÇŒº, x ‚àà interval_oc a b ‚Üí P x) ‚Üî
  (‚àÄ·µê x ‚àÇ (Œº.restrict $ Ioc a b), P x) ‚àß (‚àÄ·µê x ‚àÇ (Œº.restrict $ Ioc b a), P x) :=
begin
  simp_rw ae_interval_oc_iff,
  rw [ae_restrict_eq, eventually_inf_principal, ae_restrict_eq, eventually_inf_principal] ;
  exact measurable_set_Ioc,
end

end interval_integrable

-- Below is a capital iota
local notation `Œô` := interval_oc

variables {Œ± : Type*} [measurable_space Œ±] {Œº : measure Œ±}


/-! # Integral with parameters -/

section

variables {E : Type*} [normed_group E] [second_countable_topology E] [normed_space ‚Ñù E]
  [complete_space E] [measurable_space E] [borel_space E]

variables {X : Type*} [topological_space X] [first_countable_topology X]

lemma continuous_at_of_dominated {F : X ‚Üí Œ± ‚Üí E} {x‚ÇÄ : X} {bound : Œ± ‚Üí ‚Ñù}
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) Œº) (h_bound : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ·µê a ‚àÇŒº, ‚à•F x a‚à• ‚â§ bound a)
  (bound_integrable : integrable bound Œº) (h_cont : ‚àÄ·µê a ‚àÇŒº, continuous_at (Œª x, F x a) x‚ÇÄ) :
  continuous_at (Œªn, ‚à´ a, F n a ‚àÇŒº) x‚ÇÄ :=
tendsto_integral_filter_of_dominated_convergence bound
  (first_countable_topology.nhds_generated_countable x‚ÇÄ) ‚Äπ_‚Ä∫ (mem_of_nhds hF_meas : _) ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫

lemma continuous_of_dominated {F : X ‚Üí Œ± ‚Üí E} {bound : Œ± ‚Üí ‚Ñù}
  (hF_meas : ‚àÄ x, ae_measurable (F x) Œº) (h_bound : ‚àÄ x, ‚àÄ·µê a ‚àÇŒº, ‚à•F x a‚à• ‚â§ bound a)
  (bound_integrable : integrable bound Œº) (h_cont : ‚àÄ·µê a ‚àÇŒº, continuous (Œª x, F x a)) :
  continuous (Œªn, ‚à´ a, F n a ‚àÇŒº) :=
continuous_iff_continuous_at.mpr (Œª x‚ÇÄ, continuous_at_of_dominated (eventually_of_forall hF_meas)
  (eventually_of_forall h_bound) ‚Äπ_‚Ä∫ $ h_cont.mono $ Œª _, continuous.continuous_at)

section interval
variables [linear_order Œ±]

lemma continuous_at_of_dominated_interval {F : X ‚Üí Œ± ‚Üí E} {x‚ÇÄ : X} {bound : Œ± ‚Üí ‚Ñù} {a b : Œ±}
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) (Œº.restrict $ Œô a b))
  (h_bound : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), ‚à•F x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound Œº a b)
  (h_cont : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), continuous_at (Œª x, F x t) x‚ÇÄ) :
  continuous_at (Œªn, ‚à´ t in a..b, F n t ‚àÇŒº) x‚ÇÄ :=
begin
  have gc := first_countable_topology.nhds_generated_countable x‚ÇÄ,
  cases bound_integrable,
  cases le_or_gt a b with hab hab;
  [{ rw interval_oc_of_le hab at *,
     simp_rw interval_integral.integral_of_le hab },
   { rw interval_oc_of_lt hab at *,
     simp_rw interval_integral.integral_of_ge (le_of_lt hab),
     refine tendsto.neg _ }];
  apply tendsto_integral_filter_of_dominated_convergence bound gc hF_meas (mem_of_nhds hF_meas : _) h_bound,
  exact bound_integrable_left,
  exact h_cont,
  exact bound_integrable_right,
  exact h_cont
end

lemma continuous_of_dominated_interval {F : X ‚Üí Œ± ‚Üí E} {bound : Œ± ‚Üí ‚Ñù} {a b : Œ±}
  (hF_meas : ‚àÄ x, ae_measurable (F x) $ Œº.restrict $ Œô a b)
  (h_bound : ‚àÄ x, ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), ‚à•F x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound Œº a b)
  (h_cont : ‚àÄ·µê t ‚àÇ(Œº.restrict $ Œô a b), continuous (Œª x, F x t)) :
  continuous (Œªn, ‚à´ t in a..b, F n t ‚àÇŒº) :=
continuous_iff_continuous_at.mpr (Œª x‚ÇÄ, continuous_at_of_dominated_interval (eventually_of_forall hF_meas)
  (eventually_of_forall h_bound) ‚Äπ_‚Ä∫ $ h_cont.mono $ Œª _, continuous.continuous_at)

/- The next lemma uses the Lebesgue measure on ‚Ñù. -/

lemma continuous_of_dominated_interval' {F : X ‚Üí ‚Ñù ‚Üí E} {b : X ‚Üí ‚Ñù} {bound : ‚Ñù ‚Üí ‚Ñù} {a : ‚Ñù}
  {x‚ÇÄ : X}
  (F_cont : ‚àÄ·µê t, continuous_at (Œª x, F x t) x‚ÇÄ)
  (b_cont : continuous_at b x‚ÇÄ)
  (h_bound : ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚àÄ t, ‚à•F x t‚à• ‚â§ bound t)
  (h : loc_integrable bound) :
  continuous_at (Œª x, ‚à´ t in a..b x, F x t) x‚ÇÄ :=
begin

  sorry
end
end interval

end

variables {E : Type*} [normed_group E] [measurable_space E] [borel_space E]

lemma integrable_of_norm_sub_le {f‚ÇÄ f‚ÇÅ : Œ± ‚Üí E} {g : Œ± ‚Üí ‚Ñù}
  (hf‚ÇÅ_m : ae_measurable f‚ÇÅ Œº)
  (hf‚ÇÄ_i : integrable f‚ÇÄ Œº)
  (hg_i : integrable g Œº)
  (h : ‚àÄ·µê a ‚àÇŒº, ‚à•f‚ÇÄ a - f‚ÇÅ a‚à• ‚â§ g a) :
  integrable f‚ÇÅ Œº :=
begin
  have : ‚àÄ·µê a ‚àÇŒº, ‚à•f‚ÇÅ a‚à• ‚â§ ‚à•f‚ÇÄ a‚à• + g a,
  { apply h.mono,
    intros a ha,
    calc ‚à•f‚ÇÅ a‚à• ‚â§ ‚à•f‚ÇÄ a‚à• + ‚à•f‚ÇÄ a - f‚ÇÅ a‚à• : norm_le_insert _ _
    ... ‚â§ ‚à•f‚ÇÄ a‚à• + g a : add_le_add_left ha _ },
  exact integrable.mono' (hf‚ÇÄ_i.norm.add hg_i) hf‚ÇÅ_m this
end

section
variables
   [normed_space ‚Ñù E]
  {H : Type*} [normed_group H] [normed_space ‚Ñù H] [measurable_space H]
  [second_countable_topology $ H ‚ÜíL[‚Ñù] E] [measurable_space $ H ‚ÜíL[‚Ñù] E]
  [borel_space $ H ‚ÜíL[‚Ñù] E]

lemma measurable.apply_continuous_linear_map {œÜ : Œ± ‚Üí H ‚ÜíL[‚Ñù] E} (hœÜ : measurable œÜ) (v : H) :
  measurable (Œª a, œÜ a v) :=
(continuous_linear_map.apply ‚Ñù E v).measurable.comp hœÜ

lemma ae_measurable.apply_continuous_linear_map {œÜ : Œ± ‚Üí H ‚ÜíL[‚Ñù] E} (hœÜ : ae_measurable œÜ Œº) (v : H) :
  ae_measurable (Œª a, œÜ a v) Œº :=
(continuous_linear_map.apply ‚Ñù E v).measurable.comp_ae_measurable hœÜ
end

variables [second_countable_topology E] [normed_space ‚Ñù E] [complete_space E]
  {H : Type*} [normed_group H] [normed_space ‚Ñù H] [measurable_space H]
  [second_countable_topology $ H ‚ÜíL[‚Ñù] E] [measurable_space $ H ‚ÜíL[‚Ñù] E]
  [borel_space $ H ‚ÜíL[‚Ñù] E]

lemma measure_theory.integrable.apply_continuous_linear_map {œÜ : Œ± ‚Üí H ‚ÜíL[‚Ñù] E}
  (œÜ_int : integrable œÜ Œº) (v : H) : integrable (Œª a, œÜ a v) Œº :=
(œÜ_int.norm.mul_const ‚à•v‚à•).mono' (œÜ_int.ae_measurable.apply_continuous_linear_map v)
  (eventually_of_forall $ Œª a, (œÜ a).le_op_norm v)

lemma continuous_linear_map.apply_integral {œÜ : Œ± ‚Üí H ‚ÜíL[‚Ñù] E}
  (œÜ_int : integrable œÜ Œº) (v : H) : ‚à´ a, œÜ a v ‚àÇŒº = (‚à´ a, œÜ a ‚àÇŒº) v :=
(continuous_linear_map.apply ‚Ñù E v).integral_comp_comm œÜ_int

lemma measurable_abs : measurable (abs : ‚Ñù ‚Üí ‚Ñù) :=
continuous_abs.measurable

lemma has_fderiv_at_of_dominated_loc_of_lip' {F : H ‚Üí Œ± ‚Üí E} {F' : Œ± ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {bound : Œ± ‚Üí ‚Ñù}
  {Œµ : ‚Ñù}
  (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ae_measurable (F x) Œº)
  (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : ae_measurable F' Œº)
  (h_lipsch : ‚àÄ·µê a ‚àÇŒº, lipschitz_on_with (real.nnabs $ bound a) (Œª x, F x a) (ball x‚ÇÄ Œµ))
  (bound_integrable : integrable (bound : Œ± ‚Üí ‚Ñù) Œº)
  (h_diff : ‚àÄ·µê a ‚àÇŒº, has_fderiv_at (Œª x, F x a) (F' a) x‚ÇÄ) :
  integrable F' Œº ‚àß has_fderiv_at (Œª x, ‚à´ a, F x a ‚àÇŒº) (‚à´ a, F' a ‚àÇŒº) x‚ÇÄ :=
begin
  have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos,
  have nneg : ‚àÄ x, 0 ‚â§ ‚à•x - x‚ÇÄ‚à•‚Åª¬π := Œª x, inv_nonneg.mpr (norm_nonneg _) ,
  set b : Œ± ‚Üí ‚Ñù := Œª a, abs (bound a),
  --have b_meas : measurable b :=  measurable_abs.comp bound_measurable,
  have b_int : integrable b Œº := bound_integrable.norm,
  have b_nonneg : ‚àÄ a, 0 ‚â§ b a := Œª a, abs_nonneg _,
  have hF_int' : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, integrable (F x) Œº,
  { intros x x_in,
    have : ‚àÄ·µê a ‚àÇŒº, ‚à•F x‚ÇÄ a - F x a‚à• ‚â§ Œµ * ‚à•(bound a : ‚Ñù)‚à•,
    { apply h_lipsch.mono,
      intros a ha,
      rw lipschitz_on_with_iff_norm_sub_le at ha,
      apply (ha x‚ÇÄ x‚ÇÄ_in x x_in).trans,
      rw [mul_comm, nnreal.coe_nnabs, real.norm_eq_abs],
      rw [mem_ball, dist_eq_norm, norm_sub_rev] at x_in,
      exact mul_le_mul_of_nonneg_right (le_of_lt x_in) (abs_nonneg  _) },
    exact integrable_of_norm_sub_le (hF_meas x x_in) hF_int
      (integrable.const_mul bound_integrable.norm Œµ) this },
  have hF'_int : integrable F' Œº,
  { have : ‚àÄ·µê a ‚àÇŒº, ‚à•F' a‚à• ‚â§ b a,
    { apply (h_diff.and h_lipsch).mono,
      rintros a ‚ü®ha_diff, ha_lip‚ü©,
      exact ha_diff.le_of_lip (ball_mem_nhds _ Œµ_pos) ha_lip },
    exact b_int.mono' hF'_meas this },
  refine ‚ü®hF'_int, _‚ü©,
  have h_ball: ball x‚ÇÄ Œµ ‚àà ùìù x‚ÇÄ := ball_mem_nhds x‚ÇÄ Œµ_pos,
  have : ‚àÄ·∂† x in ùìù x‚ÇÄ,
      ‚à•x - x‚ÇÄ‚à•‚Åª¬π * ‚à•‚à´ a, F x a ‚àÇŒº - ‚à´ a, F x‚ÇÄ a ‚àÇŒº - (‚à´ a, F' a ‚àÇŒº) (x - x‚ÇÄ)‚à• =
       ‚à•‚à´ a, ‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a  - F' a (x - x‚ÇÄ)) ‚àÇŒº‚à•,
  { apply mem_sets_of_superset (ball_mem_nhds _ Œµ_pos),
    intros x x_in,
    rw [set.mem_set_of_eq, ‚Üê norm_smul_of_nonneg (nneg _), integral_smul,
        integral_sub, integral_sub, continuous_linear_map.apply_integral hF'_int],
    exacts [hF_int' x x_in, hF_int, (hF_int' x x_in).sub hF_int,
            hF'_int.apply_continuous_linear_map _] },
  rw [has_fderiv_at_iff_tendsto, tendsto_congr' this, ‚Üê tendsto_zero_iff_norm_tendsto_zero,
      ‚Üê show ‚à´ (a : Œ±), ‚à•x‚ÇÄ - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x‚ÇÄ a - F x‚ÇÄ a - (F' a) (x‚ÇÄ - x‚ÇÄ)) ‚àÇŒº = 0, by simp],
  apply tendsto_integral_filter_of_dominated_convergence,
  { apply is_countably_generated_nhds },
  { filter_upwards [h_ball],
    intros x x_in,
    apply ae_measurable.const_smul,
    exact ((hF_meas _ x_in).sub (hF_meas _ x‚ÇÄ_in)).sub (hF'_meas.apply_continuous_linear_map _) },
  { simp [measurable_const] },
  { apply mem_sets_of_superset h_ball,
    intros x hx,
    apply (h_diff.and h_lipsch).mono,
    rintros a ‚ü®ha_deriv, ha_bound‚ü©,
    show ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a - F' a (x - x‚ÇÄ))‚à• ‚â§ b a + ‚à•F' a‚à•,
    replace ha_bound : ‚à•F x a - F x‚ÇÄ a‚à• ‚â§ b a * ‚à•x - x‚ÇÄ‚à•,
    { rw lipschitz_on_with_iff_norm_sub_le at ha_bound,
      exact ha_bound _ hx _ x‚ÇÄ_in },
    calc ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a - F' a (x - x‚ÇÄ))‚à•
    = ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a) - ‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ F' a (x - x‚ÇÄ)‚à• : by rw smul_sub
    ... ‚â§  ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a)‚à• + ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ F' a (x - x‚ÇÄ)‚à• : norm_sub_le _ _
    ... =  ‚à•x - x‚ÇÄ‚à•‚Åª¬π * ‚à•F x a - F x‚ÇÄ a‚à• + ‚à•x - x‚ÇÄ‚à•‚Åª¬π * ‚à•F' a (x - x‚ÇÄ)‚à• : by { rw [norm_smul_of_nonneg, norm_smul_of_nonneg] ; exact nneg _}
    ... ‚â§  ‚à•x - x‚ÇÄ‚à•‚Åª¬π * (b a * ‚à•x - x‚ÇÄ‚à•) + ‚à•x - x‚ÇÄ‚à•‚Åª¬π * (‚à•F' a‚à• * ‚à•x - x‚ÇÄ‚à•) : add_le_add _ _
    ... ‚â§ b a + ‚à•F' a‚à• : _,
    exact mul_le_mul_of_nonneg_left ha_bound (nneg _),
    apply mul_le_mul_of_nonneg_left ((F' a).le_op_norm _) (nneg _),
    by_cases h : ‚à•x - x‚ÇÄ‚à• = 0,
    { simpa [h] using add_nonneg (b_nonneg a) (norm_nonneg (F' a)) },
    { field_simp [h] } },
  { exact b_int.add hF'_int.norm },
  { apply h_diff.mono,
    intros a ha,
    suffices : tendsto (Œª x, ‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a - F' a (x - x‚ÇÄ))) (ùìù x‚ÇÄ) (ùìù 0),
    by simpa,
    rw tendsto_zero_iff_norm_tendsto_zero,
    have : (Œª x, ‚à•x - x‚ÇÄ‚à•‚Åª¬π * ‚à•F x a - F x‚ÇÄ a - F' a (x - x‚ÇÄ)‚à•) = Œª x, ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a - F' a (x - x‚ÇÄ))‚à•,
    { ext x,
      rw norm_smul_of_nonneg (nneg _) },
    rwa [has_fderiv_at_iff_tendsto, this] at ha },
end

lemma has_fderiv_at_of_dominated_loc_of_lip {F : H ‚Üí Œ± ‚Üí E} {F' : Œ± ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {bound : Œ± ‚Üí ‚Ñù}
  {Œµ : ‚Ñù}
  (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) Œº)
  (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : ae_measurable F' Œº)
  (h_lip : ‚àÄ·µê a ‚àÇŒº, lipschitz_on_with (real.nnabs $ bound a) (Œª x, F x a) (ball x‚ÇÄ Œµ))
  (bound_integrable : integrable (bound : Œ± ‚Üí ‚Ñù) Œº)
  (h_diff : ‚àÄ·µê a ‚àÇŒº, has_fderiv_at (Œª x, F x a) (F' a) x‚ÇÄ) :
  integrable F' Œº ‚àß has_fderiv_at (Œª x, ‚à´ a, F x a ‚àÇŒº) (‚à´ a, F' a ‚àÇŒº) x‚ÇÄ :=
begin
  obtain ‚ü®Œµ', Œµ'_pos, h'‚ü© : ‚àÉ Œµ' > 0, ‚àÄ x ‚àà ball x‚ÇÄ Œµ', ae_measurable (F x) Œº,
  by simpa using nhds_basis_ball.eventually_iff.mp hF_meas,
  set Œ¥ := min Œµ Œµ',
  have Œ¥_pos : 0 < Œ¥ := lt_min Œµ_pos Œµ'_pos,
  replace h' : ‚àÄ x, x ‚àà ball x‚ÇÄ Œ¥ ‚Üí ae_measurable (F x) Œº,
  { intros x x_in,
    exact h' _ (ball_subset_ball (min_le_right Œµ Œµ') x_in) },
  replace h_lip : ‚àÄ·µê (a : Œ±) ‚àÇŒº, lipschitz_on_with (real.nnabs $ bound a) (Œª x, F x a) (ball x‚ÇÄ Œ¥),
  { apply h_lip.mono,
    intros a lip,
    exact lip.mono (ball_subset_ball $ min_le_left Œµ Œµ') },
  apply has_fderiv_at_of_dominated_loc_of_lip' Œ¥_pos ; assumption
end


lemma has_fderiv_at_of_dominated_of_fderiv_le {F : H ‚Üí Œ± ‚Üí E} {F' : H ‚Üí Œ± ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {bound : Œ± ‚Üí ‚Ñù}
  {Œµ : ‚Ñù}
  (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) Œº)
  (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : ae_measurable (F' x‚ÇÄ) Œº)
  (h_bound : ‚àÄ·µê a ‚àÇŒº, ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚à•F' x a‚à• ‚â§ bound a)
  (bound_integrable : integrable (bound : Œ± ‚Üí ‚Ñù) Œº)
  (h_diff : ‚àÄ·µê a ‚àÇŒº, ‚àÄ x ‚àà ball x‚ÇÄ Œµ, has_fderiv_at (Œª x, F x a) (F' x a) x) :
  has_fderiv_at (Œª x, ‚à´ a, F x a ‚àÇŒº) (‚à´ a, F' x‚ÇÄ a ‚àÇŒº) x‚ÇÄ :=
begin
  have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos,
  have diff_x‚ÇÄ : ‚àÄ·µê a ‚àÇŒº, has_fderiv_at (Œª x, F x a) (F' x‚ÇÄ a) x‚ÇÄ :=
    h_diff.mono (Œª a ha, ha x‚ÇÄ x‚ÇÄ_in),
  have : ‚àÄ·µê a ‚àÇŒº, lipschitz_on_with (real.nnabs (bound a)) (Œª x, F x a) (ball x‚ÇÄ Œµ),
  { apply (h_diff.and h_bound).mono,
    rintros a ‚ü®ha_deriv, ha_bound‚ü©,
    have bound_nonneg : 0 ‚â§ bound a := (norm_nonneg (F' x‚ÇÄ a)).trans (ha_bound x‚ÇÄ x‚ÇÄ_in),
    rw show real.nnabs (bound a) = nnreal.of_real (bound a), by simp [bound_nonneg],
    apply convex.lipschitz_on_with_of_norm_has_fderiv_within_le _ ha_bound (convex_ball _ _),
    intros x x_in,
    exact (ha_deriv x x_in).has_fderiv_within_at, },
  exact (has_fderiv_at_of_dominated_loc_of_lip Œµ_pos hF_meas hF_int
                                               hF'_meas this bound_integrable diff_x‚ÇÄ).2
end

open set

variables (ŒΩ : measure ‚Ñù)

local notation `I` := interval_oc

lemma has_fderiv_at_of_dominated_of_fderiv_le'' {F : H ‚Üí ‚Ñù ‚Üí E} {F' : H ‚Üí ‚Ñù ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {a b : ‚Ñù}
  {bound : ‚Ñù ‚Üí ‚Ñù}
  {Œµ : ‚Ñù}
  (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) $ ŒΩ.restrict (Œô a b))
  (hF_int : interval_integrable (F x‚ÇÄ) ŒΩ a b)
  (hF'_meas : ae_measurable (F' x‚ÇÄ) $ ŒΩ.restrict (Œô a b))
  (h_bound : ‚àÄ·µê t ‚àÇŒΩ, t ‚àà I a b ‚Üí ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚à•F' x t‚à• ‚â§ bound t)
  (bound_integrable : interval_integrable bound ŒΩ a b)
  (h_diff : ‚àÄ·µê t ‚àÇŒΩ, t ‚àà I a b ‚Üí ‚àÄ x ‚àà ball x‚ÇÄ Œµ, has_fderiv_at (Œª x, F x t) (F' x t) x) :
  has_fderiv_at (Œª x, ‚à´ t in a..b, F x t ‚àÇŒΩ) (‚à´ t in a..b, F' x‚ÇÄ t ‚àÇŒΩ) x‚ÇÄ :=
begin
  erw ae_interval_oc_iff' at h_diff h_bound,
  simp_rw [ae_measurable_interval_oc_iff, eventually_and] at hF_meas hF'_meas,
  exact (has_fderiv_at_of_dominated_of_fderiv_le Œµ_pos hF_meas.1 hF_int.1 hF'_meas.1 h_bound.1
         bound_integrable.1 h_diff.1).sub
        (has_fderiv_at_of_dominated_of_fderiv_le Œµ_pos hF_meas.2 hF_int.2 hF'_meas.2 h_bound.2
         bound_integrable.2 h_diff.2)
end

lemma continuous.ae_measurable {Œ± Œ≥ : Type*} [topological_space Œ±] [measurable_space Œ±]
  [opens_measurable_space Œ±] [topological_space Œ≥] [measurable_space Œ≥]
  [borel_space Œ≥] {f : Œ± ‚Üí Œ≥} (h : continuous f) (Œº : measure Œ±): ae_measurable f Œº :=
‚ü®f, h.measurable, eventually_eq.refl _ _‚ü©

lemma has_deriv_at_of_dominated_loc_of_lip {F : ‚Ñù ‚Üí Œ± ‚Üí E} {F' : Œ± ‚Üí E} {x‚ÇÄ : ‚Ñù} {bound : Œ± ‚Üí ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) Œº)
  (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : ae_measurable F' Œº)
  (h_lipsch : ‚àÄ·µê a ‚àÇŒº, lipschitz_on_with (real.nnabs $ bound a) (Œª x, F x a) (ball x‚ÇÄ Œµ))
  (bound_integrable : integrable (bound : Œ± ‚Üí ‚Ñù) Œº)
  (h_diff : ‚àÄ·µê a ‚àÇŒº, has_deriv_at (Œª x, F x a) (F' a) x‚ÇÄ) :
  (integrable F' Œº) ‚àß has_deriv_at (Œª x, ‚à´ a, F x a ‚àÇŒº) (‚à´ a, F' a ‚àÇŒº) x‚ÇÄ :=
begin
  have hm := (continuous_linear_map.smul_rightL ‚Ñù ‚Ñù E 1).continuous.measurable.comp_ae_measurable
             hF'_meas,
  cases has_fderiv_at_of_dominated_loc_of_lip Œµ_pos hF_meas hF_int hm h_lipsch bound_integrable
    h_diff with hF'_int key,
  replace hF'_int : integrable F' Œº,
  { rw [‚Üê integrable_norm_iff hm] at hF'_int,
    simpa [integrable_norm_iff, hF'_meas] using hF'_int },
  refine ‚ü®hF'_int, _‚ü©,
  simp_rw has_deriv_at_iff_has_fderiv_at at h_diff ‚ä¢,
  rwa continuous_linear_map.integral_comp_comm _ hF'_int at key,
end

lemma has_deriv_at_of_dominated_loc_of_deriv_le {F : ‚Ñù ‚Üí Œ± ‚Üí E} {F' : ‚Ñù ‚Üí Œ± ‚Üí E} {x‚ÇÄ : ‚Ñù} {bound : Œ± ‚Üí ‚Ñù} {Œµ : ‚Ñù}
  (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) Œº)
  (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : ae_measurable (F' x‚ÇÄ) Œº)
  (h_bound : ‚àÄ·µê a ‚àÇŒº, ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚à•F' x a‚à• ‚â§ bound a)
  (bound_integrable : integrable bound Œº)
  (h_diff : ‚àÄ·µê a ‚àÇŒº, ‚àÄ x ‚àà ball x‚ÇÄ Œµ, has_deriv_at (Œª x, F x a) (F' x a) x) :
  (integrable (F' x‚ÇÄ) Œº) ‚àß has_deriv_at (Œªn, ‚à´ a, F n a ‚àÇŒº) (‚à´ a, F' x‚ÇÄ a ‚àÇŒº) x‚ÇÄ :=
begin
  have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos,
  have diff_x‚ÇÄ : ‚àÄ·µê a ‚àÇŒº, has_deriv_at (Œª x, F x a) (F' x‚ÇÄ a) x‚ÇÄ :=
    h_diff.mono (Œª a ha, ha x‚ÇÄ x‚ÇÄ_in),
  have : ‚àÄ·µê a ‚àÇŒº, lipschitz_on_with (real.nnabs (bound a)) (Œª (x : ‚Ñù), F x a) (ball x‚ÇÄ Œµ),
  { apply (h_diff.and h_bound).mono,
    rintros a ‚ü®ha_deriv, ha_bound‚ü©,
    have bound_nonneg : 0 ‚â§ bound a := (norm_nonneg (F' x‚ÇÄ a)).trans (ha_bound x‚ÇÄ x‚ÇÄ_in),
    rw show real.nnabs (bound a) = nnreal.of_real (bound a), by simp [bound_nonneg],
    apply convex.lipschitz_on_with_of_norm_has_deriv_within_le (convex_ball _ _)
    (Œª x x_in, (ha_deriv x x_in).has_deriv_within_at) ha_bound },
  exact has_deriv_at_of_dominated_loc_of_lip Œµ_pos hF_meas hF_int hF'_meas this
        bound_integrable diff_x‚ÇÄ
end


#lint
